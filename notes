pipecmd struct:
	char** array
		first element is abs path name of cmd, rest are args
	int length of char** array
	int fd in
	int fd out

pipe parser function:
	only gets called if there is a | as one of the tokens
	args:
		token struct
		int background
		
	return:
		if background, last command pid, unless there is an error, in which case return -1
		else, -1
	
	body:
		get number of | tokens
		check if there is a <
			if so, check if it is before the first | and if it is the only one
				if either arent true, error
			check if there is only one token between < and |
				if not, error
				if yes, check if that token is a valid file
					if not, error
					if yes, save as char* as filein
		check if there is a >
			if so, check if it is after the last | and if it is the only one
				if either arent true, error
			check if there is only one token between > and |
				if not, error
				if yes, check if that token is a valid file
					if not, error
					if yes, save as char* as fileout
					
		create an array of pipecmd struct
		go through token struct
			if first token:
				create pipecmd
				and first token char* to pipecmd
			else if cur token is < > or |:
				add current pipecmd to pipecmd struct
				create new pipecmd, add next token char* to pipecmd
				if this is the last token, error
			else:
				add current token char* to pipecmd
		
		check if length of pipecmd struct is 1 + number of |
			if not, error
		
		for each pipecmd in array - 1:
			call pipe() function
			add fd[1] to current pipecmd fd out
			add fd[0] to next pipecmd fd in
			
		return call pipe exec function
		

pipe exec function
	args:
		pipecmd array
		int length of pipecmd array
		char* abs path of io redirection file in
			NULL if not
		char* abs path of io redirection file out
			NULL if not
		int if background
		
	return:
		if background, last cmd pid
		else, -1
			
	body:
		for(each pipecmd in array)
			if first one:
				fork
					parent:
						do nothing
					child:
						if file in isnt null:
							redirect stdin
						redirect stdout
						run cmd
						exit()
			else if last one:
				pid = fork
					parent:
						if background:
							return pid of last one
						else wait for last one to finish running, then return -1
					child:
						if file out isnt null:
							redirect stdout
						redirect stdin
						run cmd
						exit()
			else we are in a middle command
				fork
					parent:
						do nothing
					child:
						redirect stdin
						redirect stdout
						run cmd
						exit()
						
					

		